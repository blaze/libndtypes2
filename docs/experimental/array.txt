
Array: variable array type
--------------------------

The variable array is a map of dimensions, data and their respective validity
bitmaps.  Conceptually it is a tuple type, but for performance reasons it is
implemented as a custom type.

It is important to understand that the Array is a sort of virtual type that
contains the top level access information for the dimension data.

Here is an example layout for a two-dimensional variable array:

memory: (data, bitmap, dim1_data, dim1_bitmap, dim2_data, dim2_bitmap)
ndim:      0      0      1        1        2       2

The actual array data could also be referred to as dim0_data, the zero
is omitted for clarity.

Dimension data (for dimensions >= 1) consists of integers.  These integers
are indices into the following dimension.  For space optimization libndtypes
uses the smallest possible integer type by default.


Default dimension data type, alignment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   The dimension data type is the smallest possible fixed width unsigned
   integer type.

   The array tuple (and thereby 'data') is aligned at 64 bytes and padded to
   a 64-byte boundary.

   Bitmaps (uint64_t[]) and dimension data (uintN_t[]) have their minimum
   natural alignment.

Arrow dimension data type, alignment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   The dimension data type is int32_t.

   The array tuple and all individual members are aligned at 64 bytes
   and padded to a 64-byte boundary.
